(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{1104:function(e,n,o){"use strict";o.r(n),o.d(n,"default",(function(){return g}));var t=o(13),r=o.n(t),l=o(27),p=o.n(l),a=(o(0),o(437)),i={};function g(e){var n=e.components,o=p()(e,["components"]);return Object(a.mdx)("wrapper",r()({},i,o,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("h1",{id:"logger"},"Logger"),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"terra-cli")," provides a logger for use when creating cli tools. It is built on top of the ",Object(a.mdx)("a",{parentName:"p",href:"https://github.com/npm/npmlog"},"npm logger")," and supports all log levels that the npm logger supports. It automatically provides a ",Object(a.mdx)("inlineCode",{parentName:"p"},"terra")," heading to group terra cli commands in one namespace and a ",Object(a.mdx)("inlineCode",{parentName:"p"},"prefix")," prop to group all logs from a given file together."),Object(a.mdx)("h2",{id:"example"},"Example"),Object(a.mdx)("p",null,"The following will log at the info level."),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre"},"const { Logger } = require('@cerner/terra-cli');\n\nconst logger = new Logger({ prefix: '[test-logger]' });\n\nlogger.info('Logging something at the info level');\n")))}g.isMDXComponent=!0}}]);